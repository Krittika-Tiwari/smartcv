// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ResumeTemplate {
  classic
  modern
  minimal
  creative
}

model Resume {
  id     String @id @default(cuid())
  userId String

  title       String?
  description String?

  photoUrl       String?
  colorHex       String         @default("#000000")
  borderStyle    String         @default("squircle")
  summary        String?
  firstName      String?
  lastName       String?
  jobTitle       String?
  city           String?
  country        String?
  phone          String?
  email          String?
  linkedin       String?
  github         String?
  leetcode       String?
  portfolio      String?
  rollNumber     String? // Roll No.: 2022UG1017
  degree         String? // Bachelor of Technology
  branch         String? // Computer Science and Engineering
  institute      String?
  instituteEmail String?
  template       ResumeTemplate @default(classic)
  isPublic       Boolean        @default(false)

  workExperiences WorkExperience[]
  educations      Education[]
  projects        Project[]
  skills          Skill[]
  achievements    Achievement[]
  certificates    Certificate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resumes")
}

model WorkExperience {
  id String @id @default(cuid())

  position    String?
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_experiences")
}

model Education {
  id String @id @default(cuid())

  degree    String?
  school    String?
  cgpa      String?
  startDate DateTime?
  endDate   DateTime?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("educations")
}

model Project {
  id String @id @default(cuid())

  name        String?
  description String?
  url         String?
  github      String?
  stack       String[]
  startDate   DateTime?
  endDate     DateTime?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model Skill {
  id String @id @default(cuid())

  category String?
  values   String[]

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

model Achievement {
  id        String    @id @default(cuid())
  title     String?
  issuer    String?
  startDate DateTime?
  endDate   DateTime?
  resumeId  String
  resume    Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("achievements")
}

model Certificate {
  id       String    @id @default(cuid())
  name     String?
  issuer   String?
  url      String?
  date     DateTime?
  resumeId String
  resume   Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("certificates")
}
